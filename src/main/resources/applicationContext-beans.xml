<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
   http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	
	<!-- <bean> 태그: - Spring에서 빈을 정의할 때 사용됩니다. - id 속성 : 빈의 고유 식별자로 사용됩니다. 다른 
		빈에서 이 식별자를 사용하여 의존성 주입(Dependency Injection)을 할 수 있습니다. - class 속성 : 빈이 생성될 
		클래스의 풀 패키지 경로를 지정합니다. -->
		
		<!-- The controllers are auto-detected POJOs labeled with the @Controller annotation. -->
		<!-- "com.feb.jdbc" 패키지 내에서 @Service 어노테이션을 가진 클래스를 찾아서 Spring 컨텍스트에 등록한다. -->
		<!-- Spring이 자동으로 빈으로 등록하여 DI(Dependency Injection)를 수행한다. -->
	<context:component-scan base-package="com.feb.test" use-default-filters="false" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	  <!-- DAO 구현체 역할을 대신 해주는 클래스 기본설정 4가지 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- DB에 접속 하기 위해서 설정 -->
		<property name="dataSource" ref="dataSource" />

		<!-- myBatis 기본 설정 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />

		<!-- query 적힌 xml 위치 -->
		<property name="mapperLocations" value="classpath:sql/SQL.*.xml" />

		<!-- 트랜잭션 관리를 위한 것 -->
		<property name="transactionFactory">
			<bean class="org.mybatis.spring.transaction.SpringManagedTransactionFactory" />
		</property>
	</bean>
	<!-- 트랜잭션이란? 중간에 실패하면 이전 상태로 돌아가고, 성공하면 모든 걸 적용하는 것.
		그리고 여러 작업이 동시에 일어날 때 서로 영향을 주지 않게 격리시킴. 그리고 변경한 내용은 항상 영구적으로 저장된다.  -->

 	<!-- DAO 위치를 basePackage로.. -->
	<!-- 작업지시서가 있는 패키지 위치를 잡아줘야 사용 할 수 있다 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.feb.test.dao" />
	</bean>

	<!-- 트랜잭션 관리를 위한 bean -->
	<bean id="transactionManager" 
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	

</beans>
